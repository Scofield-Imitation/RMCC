Table of Contents
=================
1) Compiling
2) Environment Set
3) Example Running Command
4) Setting Options
5) Output File
6) Processing Script

1) Compiling:
=============
We provide two C++ code: rmcc.cpp for modeling baseline (i.e., Morphable Counters) and RMCC with memoization of L0 counters, rmcc_memoize_L1_counters.cpp for modeling RMCC with memoization of L1 counters.
1. cd pintool-rmcc/source/tools/ManualExamples
2. make obj-intel64/rmcc_memoize_L0_counters.so TARGET=intel64
3. make obj-intel64/rmcc_memoize_L1_counters.so TARGET=intel64

2) Environment Set
================
a. Huge page
In RMCC paper, we enable huge page for all evaluations. For Ubuntu 20, one can enable huge page following this link: https://paolozaino.wordpress.com/2016/10/02/how-to-force-any-linux-application-to-use-hugepages-without-modifying-the-source-code/. Somehow we fail to apply the same way of turning on huge page to Ubuntu 22. 

3) Example Running command (for mcf in SPEC2006, assuming RMCC folder and CPU2006 folder are in home directory):
==============================================
a. For Baseline (without memoization)

cd ~/CPU2006/429.mcf/run/run_base_ref_gcc43-64bit.0000

LD_PRELOAD=libhugetlbfs.so HUGETLB_MORECORE=yes setarch $(uname -m) -R ~/RMCC/pintool-rmcc/pin -t ~/RMCC/pintool-rmcc/source/tools/ManualExamples/obj-intel64/rmcc_memoize_L0_counters.so -output_dir ~/RMCC/pintool-rmcc/output/baseline/429.mcf -f 0 -tree_cpt ~/RMCC/pintool-rmcc/randomInitCpts/baseline_tree.cpt  -table_cpt ~/RMCC/pintool-rmcc/randomInitCpts/baseline_table.cpt  -dccm_overhead 1  -predictive_decryption 0  -record_recent_aes 1 -relevel_to_next_group 0  -run_insts 500000000000  --  ../run_base_ref_gcc43-64bit.0000/mcf_base.gcc43-64bit inp.in > inp.out 2>> inp.err  > ~/RMCC/pintool-rmcc/output/baseline/429.mcf/end & 


b. For RMCC with memoization of L0 counters

cd ~/CPU2006/429.mcf/run/run_base_ref_gcc43-64bit.0000

LD_PRELOAD=libhugetlbfs.so HUGETLB_MORECORE=yes setarch $(uname -m) -R ~/RMCC/pintool-rmcc/pin -t ~/RMCC/pintool-rmcc/source/tools/ManualExamples/obj-intel64/rmcc_memoize_L0_counters.so -output_dir ~/RMCC/pintool-rmcc/output/rmcc_memoize_l0/429.mcf -f 0 ~/RMCC/pintool-rmcc/randomInitCpts/memoize_l0_tree.cpt  -table_cpt ~/RMCC/pintool-rmcc/randomInitCpts/memoize_l0_table.cpt  -dccm_overhead 1  -predictive_decryption 1  -record_recent_aes 1 -relevel_to_next_group 1  -run_insts 500000000000  --  ../run_base_ref_gcc43-64bit.0000/mcf_base.gcc43-64bit inp.in > inp.out 2>> inp.err  > ~/RMCC/pintool-rmcc/output/rmcc_memoize_l0/429.mcf/end & 

c. For RMCC with memoization of L1 counters

cd ~/CPU2006/429.mcf/run/run_base_ref_gcc43-64bit.0000

LD_PRELOAD=libhugetlbfs.so HUGETLB_MORECORE=yes setarch $(uname -m) -R ~/RMCC/pintool-rmcc/pin -t ~/RMCC/pintool-rmcc/source/tools/ManualExamples/obj-intel64/rmcc_memoize_L1_counters.so -output_dir ~/RMCC/pintool-rmcc/output/rmcc_memoize_l1/429.mcf -f 0 ~/RMCC/pintool-rmcc/randomInitCpts/memoize_l1_tree.cpt  -table_cpt ~/RMCC/pintool-rmcc/randomInitCpts/memoize_l1_table.cpt  -dccm_overhead 1  -possibility_for_updating_l1_while_read 0.05 -predictive_decryption 1  -record_recent_aes 1 -relevel_to_next_group 0  -run_insts 500000000000  --  ../run_base_ref_gcc43-64bit.0000/mcf_base.gcc43-64bit inp.in > inp.out 2>> inp.err  > ~/RMCC/pintool-rmcc/output/rmcc_memoize_l1/429.mcf/end & 



4) Setting Options
================

a. Storage size (Configured by changing global definition in rmcc_memoize_L0_counters.cpp/rmcc_memoize_L1_counters.cpp and recompiling)

L2 cache size: The global variable 'L2_SET_NUM' and 'L2_SET_SIZE' in the code define the #sets and associativy of L2 cache. Here in pintool we only model two-level cache hierarchy, meaning L2 is the Last Level Cache.

Counter cache size: The global variable 'WCCACHE_SET_NUM' and 'WCCACHE_SET_SIZE' in the code define the #sets and associativy of counter cache.


b. The number of instructions to emulate
In pintool command, the option 'run_insts' specify how many instructions would be emulated by pintool. If you want to run the whole life of a benchmark, set 'run_insts' to a extreme big value.

c. Mechanism specific setting
baseline: '-predictive_decryption 0 -relevel_to_next_group 0'
RMCC with memoization of L0 counters: '-predictive_decryption 1 -relevel_to_next_group 1'
RMCC with memoization of L1 counters: '-predictive_decryption 1 -relevel_to_next_group 0 -possibility_for_updating_l1_while_read 0.05'

5) Output File
==============
Each pintool job will generate an output file (see the examples in 'output' folder) with accumulated stats (e.g., L2 cache, counter cache and memoization table's hits/accesses) printed periodically per billion insts. Those numbers in the file are raw and intermediate numbers. To get the final interesting stats like hit rate, we provide the processing script in step 6).  

6) Processing Script
====================
To help processing the results, we provide the Python scripts (in folder RMCC/pintool-rmcc/processing) for systematically get the results for specified stats, benchmarks, mechanisms (i.e., baseline, RMCC) and observation window.

We define the following important final stats in the processing script:
	- pintool_aes_table_hit_rate: hit rate in memoization table.
	- pintool_metadata_miss_rate_for_memory_reads_0/pintool_metadata_miss_rate_for_memory_reads_1/pintool_metadata_miss_rate_for_memory_reads_2: L0/L1/L2 counter miss rate in counter cache during memory reads.
	- pintool_metadata_miss_rate_for_memory_writes_0/pintool_metadata_miss_rate_for_memory_writes_1/pintool_metadata_miss_rate_for_memory_writes_2: L0/L1/L2 counter miss rate in counter cache during memory writes.
	- pintool_overflow_events_normalized_to_data_traffic_0/pintool_overflow_events_normalized_to_data_traffic_1/pintool_overflow_events_normalized_to_data_traffic_2/pintool_overflow_events_normalized_to_data_traffic_3: the number of overflow events in L0/L1/L2/L3 counter blocks (tree nodes), normalized to total number of normal data reads and writes.
	- pintool_evicted_metadata_traffic_normalized_to_data_traffic: number of counter block eviction in counter cache, normalized to total number of normal data reads and writes.  

Here are two example commands to use the script:
a. collect results from the end of the 4th billion insts to the end of whole life time:
	python process.py --params target_results.ini --whole-life-time  --skip-insts 4
b. collect results from the end of the 4th billion insts to the end of 5th billion insts:
	python process.py --params target_results.ini --skip-insts 4 --observed-insts 5


